{"version":3,"sources":["Components/Header.js","Components/RepTemplates.js","Components/Footer.js","Components/App.js","serviceWorker.js","index.js"],"names":["Header","className","RepTemplates","state","isImageBroken","repData","this","props","arrayData","map","oneRep","index","key","tabIndex","name","elected_office","representative_set_name","photo_url","src","alt","district_name","personal_url","first_name","href","target","url","email","id","Component","Footer","App","getCoordinates","postalCode","axios","method","dataResponse","params","location","then","results","lat","data","locations","latLng","lng","console","log","setState","latAndLng","requestRep","reqUrl","xmlToJSON","res","objects","apiData","setTimeout","smoothScroll","document","getElementById","scrollIntoView","behavior","block","handleChange","event","value","replace","toUpperCase","handleSubmit","preventDefault","test","isPostalCodeWrong","onSubmit","htmlFor","type","onChange","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2940c869.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return(\n        <header>\n            <div className=\"wrapper\">\n                <h1>Who's My Rep?</h1>\n                <h2>Wondering who the heck your political representatives are?</h2>\n                <p>This is the tool for you. Just enter your postal code below.</p>\n            </div>\n        </header>\n    )\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass RepTemplates extends Component {\n    constructor(){\n        super();\n        this.state = {\n            isImageBroken: false,\n        }\n    }\n\n    render(){\n        const { arrayData } = this.props;\n        const repData = arrayData.map((oneRep, index) => {\n            return(\n                <div className=\"repGroup\" key={index} tabIndex=\"0\">\n                    <h3 className=\"repName\">{oneRep.name} is your {oneRep.elected_office} in the {oneRep.representative_set_name}\n                    </h3>\n                    <div className=\"repFlex\">\n                        {oneRep.photo_url !== '' ? \n                        <div className=\"repImageContainer\">\n                            <img src={oneRep.photo_url} alt=\"A photograph of the political representative.\"/> \n                        </div> :  \n                        <div className=\"repImageContainer\">\n                            <p className=\"imageErrorMessage\">Oops! There's no photo currently available for this representative. Here's a placeholder until we get one:</p>\n                            <img src=\"https://placedog.net/640/480?random\" alt=\"A placeholder image of a cute dog until a suitable photograph of the political representative is available.\"/>\n                            </div> \n                        }\n                        <div className=\"repInfo\">\n                            <p>District represented: {oneRep.district_name}</p>\n                            {oneRep.personal_url !== '' ? \n                            <p>Learn more about {oneRep.first_name} <a href={oneRep.personal_url} target=\"_blank\">here.</a></p> : null}\n                            {oneRep.personal_url == '' & oneRep.url !== '' ?\n                            <p>Learn more about {oneRep.first_name} <a href={oneRep.url} target=\"_blank\">here.</a></p> : null}\n                            <p>Contact: <span className=\"email\">{oneRep.email}</span>\n                            </p>\n                        </div>\n                    </div>\n                </div>\n            )\n        })\n        return(\n            <main>\n                <div className=\"generatedReps wrapper\" id=\"repContainer\">\n                    { repData }\n                </div>\n            </main>\n        )\n    }\n}\nexport default RepTemplates;","import React from 'react';\n\nconst Footer = () => {\n    return (\n        <footer>\n            <div className=\"wrapper\">\n                <p>&copy; <a href=\"https://www.thatmohamedomar.com\" target=\"_blank\">Mohamed Omar 2019.</a> <a href=\"https://twitter.com/thatmohamedomar\" target=\"_blank\"><i className=\"fab fa-twitter\"></i></a><a href=\"https://www.linkedin.com/in/mohamedomar2/\" target=\"_blank\"><i className=\"fab fa-linkedin-in\"></i></a></p>\n                <p className=\"credit\">Representative data is pulled in from <a href=\"https://represent.opennorth.ca/api/\" target=\"_blank\">Open North's Represent API. </a></p>\n            </div>\n        </footer>\n    )\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport '../Partials/App.scss';\nimport Header from './Header';\nimport axios from 'axios';\nimport RepTemplates from './RepTemplates';\nimport Footer from './Footer';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      postalCode: '',\n      apiData: [],\n      isPostalCodeWrong: '',\n      latAndLng: '',\n    }\n  }\n\n  // this function will take the user's postal code and add it as an endpoint to the API URL. Then it will take a specific object from the payload (represenstatives_centroid) and add it to the state.\n\n  getCoordinates = (postalCode) => {\n    axios({\n      method: 'GET',\n      dataResponse: 'JSON',\n      url: 'http://www.mapquestapi.com/geocoding/v1/address',\n      params: {\n        key: '0e6fiTKnDmzM3WFno2NIq25f3mKTXGQw',\n        location: this.state.postalCode,\n      }\n    }).then((results) =>{\n      let lat = results.data.results[0].locations[0].latLng.lat;\n      let lng = results.data.results[0].locations[0].latLng.lng;\n      console.log(\"this is the mapquest result\", lat);\n      console.log(\"this is the mapquest result\", lng);\n    this.setState({\n      latAndLng: `${lat},${lng}`,\n    });\n    }\n    ).then(()=>{\n      this.requestRep(this.state.latAndLng);\n    })}\n\n\n  // requestRep = (postalCode) => {\n  //   axios({\n  //     method: 'GET',\n  //     url: 'https://proxy.hackeryou.com',\n  //     dataResponse: 'json',\n  //     params: {\n  //       reqUrl: `https://represent.opennorth.ca/postcodes/${this.state.postalCode}`,\n  //     },\n  //     xmlToJSON: false\n  //   }).then((res) => {\n  //     const repData = res.data.representatives_centroid;\n  //     this.setState ({\n  //       apiData: repData,\n  //     });\n  //     // Note: The API does not send us back a response when there is an error, so ufortunately the .catch method does not work at this time. However, there is already some error handling in place that will make sure the user enters a valid postal code, such as toUpperCase() and the regex test seen below.\n\n  //     // .catch(error => {\n  //     //   console.log(error);\n  //     // })\n  //     setTimeout(this.smoothScroll, 400)\n  //     this.getCoordinates();\n  //   });\n  // }\n  \n  requestRep = (latAndLng) => {\n    axios({\n      method: 'GET',\n      url: 'https://proxy.hackeryou.com',\n      dataResponse: 'json',\n      params: {\n        reqUrl: `https://represent.opennorth.ca/representatives/?point=${latAndLng}`,\n      },\n      xmlToJSON: false\n    }).then((res) => {\n      const repData = res.data.objects;\n      console.log(repData);\n      this.setState({\n        apiData: repData,\n      });\n      // Note: The API does not send us back a response when there is an error, so ufortunately the .catch method does not work at this time. However, there is already some error handling in place that will make sure the user enters a valid postal code, such as toUpperCase() and the regex test seen below.\n\n      // .catch(error => {\n      //   console.log(error);\n      // })\n      setTimeout(this.smoothScroll, 400)\n      \n    });\n  }\n\n  smoothScroll = () => {\n    let destination = document.getElementById('repContainer');\n    destination.scrollIntoView({\n      behavior: 'smooth', \n      block: 'start' \n    });\n  }\n\n  // this will track the user's postal code input and make sure it has no spaces and be uppercase, which is a requirement by the API.\n\n  handleChange = (event) => {\n    this.setState({\n      postalCode: event.target.value.replace(/\\s/g, '').toUpperCase(),\n    });\n}\n\n  // this will take the user's postal code and feed it into the requestRep function as a parameter. First it will test the code against the regex pattern, and if it successful it will call the requestRep function with that postal code. If it does not pass the regex test, it will set the state of \"isPostalCodeWorking\" to \"yes.\"\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const postalTest = /^[A-Za-z]\\d[A-Za-z][ -]?\\d[A-Za-z]\\d$/;\n    if (postalTest.test(this.state.postalCode)){\n    this.getCoordinates(this.state.postalCode);\n      this.setState({\n        isPostalCodeWrong: '',\n      });\n    }\n    else{\n      this.setState({\n        isPostalCodeWrong: \"yes\",\n      })\n    }\n  }\n  \n  // the following code renders the components and, in between, the input and button that will ultimately call our API. The results from that will be fed as a prop to the RepTemplates component.\n\n  render(){\n  return (\n    <div className=\"App\">\n    <Header />\n    {/* this is the input and button */}\n      <div className=\"searchField wrapper\">\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"postalCodeInput\" className=\"visuallyHidden\">Postal Code</label>\n          <input\n            type=\"text\"\n            name=\"postalCode\"\n            onChange={this.handleChange}\n            value={this.postalCode} />\n            {/* this will render if the postal code does not pass the regex test*/}\n            {this.state.isPostalCodeWrong === 'yes' && <p className=\"postalError\">Oops! That's not a valid postal code.</p>}\n          <button\n            // onClick={this.handleSubmit} \n            type=\"submit\">Rep me!\n          </button>\n        </form>\n      </div>\n    <RepTemplates arrayData={this.state.apiData}/>\n    <Footer />\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}